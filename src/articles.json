{
  "articles": [
    {
      "cardHover": [
        { "title": "Carta 3D CSS" },
        {
          "1": [
            {
              "text": {
                "title": "Comenzamos",
                "text": "Bienvenidos a todos a este tutorial en el que aprenderemos a crear un efecto 3D sobre un contenedor al pasar el cursor por encima de el, en este caso utilizaremos una carta. Este efecto se consigue tan solo utilizando HTML y CSS.\n\nA continuacion comenzaremos con la explicacion. Pero antes, si quieres ver una demo de este efecto puedes hacer click debajo y verlo en mi galeria CSS."
              }
            },
            {
              "link": {
                "title": "Vamonos",
                "link": "https://goorezy-css-gallery.netlify.app/gallery/card-hover-3d"
              }
            },
            {
              "text": {
                "title": "HTML",
                "text": "Empezemos con el codigo HTML, este se basa en el contenedor principal (container) el cual cumple la funcion de contener dentro de el todo el contenido del efecto.\n\nPor otro lado tenemos el contenedor en el que implementaremos el efecto, el cual es un <div> que contiene dentro 9 <span>, cada uno de ellos ocupara un 33% del espacio total del contenedor, permitiendo asi que dependiendo en que span se haga hover la carta genere un efecto de perspectiva 3D inclinandose hacia el lado en donde el cursor esta posicionado.\n\nPor ultimo un <div> el cual brindara los estilos que se quieran aplicar a el contenedor como tambien si asi lo desea un contenido dentro de el, en este caso sera un simple texto con el nombre del efecto."
              }
            },
            {
              "code": {
                "language": "html",
                "code": "<section className='container'>\n <div class='card'>\n  <div class='card-box-wrap'>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <span class='over'></span>\n    <div class='card-box'>\n     <strong>\n     3D Card\n     <br />\n     Hover Effect\n     </strong>\n     </div>\n  </div>\n</div>\n</section>"
              }
            },
            {
              "text": {
                "title": "CSS Basico",
                "text": "A continuacion veremos la explicacion del codigo CSS, iremos por parte para poder abordarlo correctamente y brindar claridad sobre la funcionalidad de cada estilo.\n\nPrimero tendremos el container, el cual permitira un buen posicionamiento de el contenedor del efecto, ademas utilizaremos la clase card-box-wrap para indicar el tamañano, duracion de transicion y agregar la perspectiva que brindara mas calidad al efecto.\n\nPor otro lado veamos el estilo de card-box, en este fijamos la altura y ancho para que cubra todo el contendor, y le agregamos los estilos deseados que posea el anteriormente mencionado, por ejemplo el background-image para brindar un fondo con textura. No olvides aplicar el preserve-3d en este estilo."
              }
            },
            {
              "code": {
                "language": "css",
                "code": ".container {\n  height: 100vh;\n  background: radial-gradient(rgb(35, 35, 35), rgb(0, 0, 0));\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.card-box-wrap {\n  width: 300px;\n  height: 400px;\n  position: relative;\n  transition: all 0.6s ease-out;\n  border-radius: 1rem;\n  perspective: 1000px;\n}\n.card-box-wrap:hover {\n  transition: all 0.3s linear;\n  transform: scale(1.05);\n}\n.card-box {\n  width: 100%;\n  height: 100%;\n  background-image: url(url-here);\n  background-position: center;\n  border-radius: 1rem;\n  background-size: cover;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  text-align: center;\n  font-size: 1.25rem;\n  font-weight: 700;\n  transition: all 0.6s ease-out;\n  transform: rotateX(0deg) rotateY(0deg);\n  perspective: 1000px;\n  transform-style: preserve-3d;\n}\n.card-box strong {\n  transform: translateZ(40px);\n  background: radial-gradient(rgb(35, 35, 35), rgb(0, 0, 0));\n  padding: 0.75rem;\n  border-radius: 1rem;\n  color: rgb(255, 255, 255);\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}"
              }
            },
            {
              "text": {
                "title": "CSS Efecto",
                "text": "Ahora veamos la parte mas interesante, la que permite conseguir nuestro efecto que son los estilos de over.\n\nCada span, como mencionamos anteriormente ocupara un 33% del contenedor, y asi cada uno ocupara una parte del contenedor de forma equitativa. Luego aprovechando nth-chil, posicionamos cada uno en la posicion deseada, utilizando los atributos top y left.\n\nLuego el efecto como tal a traves del hover sobre cada over se lograra con un transform indicando hacia donde se debe inclinar la carta, y asi consiguiendo el efecto de perspectiva en 3D.\n\nPor ultimo te enseñare la media query para que este efecto sea responsivo, aunque recuerda que si tu contenedor tiene dimensiones distintas, o contenido distinto, esto no te servira y deberas aplicar tus propias media querys."
              }
            },
            {
              "code": {
                "language": "css",
                "code": ".over {\n  width: 33.333%;\n  height: 33.333%;\n  position: absolute;\n  z-index: 1;\n}\n.over:nth-child(1) {\n  left: 0;\n  top: 0;\n}\n.over:nth-child(2) {\n  left: 33.333%;\n  top: 0;\n}\n.over:nth-child(3) {\n  left: 66.666%;\n  top: 0;\n}\n.over:nth-child(4) {\n  left: 0;\n  top: 33.333%;\n}\n.over:nth-child(5) {\n  left: 33.333%;\n  top: 33.333%;\n}\n.over:nth-child(6) {\n  left: 66.666%;\n  top: 33.333%;\n}\n.over:nth-child(7) {\n  left: 0;\n  top: 66.666%;\n}\n.over:nth-child(8) {\n  left: 33.333%;\n  top: 66.666%;\n}\n.over:nth-child(9) {\n  left: 66.666%;\n  top: 66.666%;\n}\n.over:nth-child(1):hover ~ .card-box {\n  transform: rotateX(-20deg) rotateY(20deg);\n}\n.over:nth-child(2):hover ~ .card-box {\n  transform: rotateX(-20deg) rotateY(0deg);\n}\n.over:nth-child(3):hover ~ .card-box {\n  transform: rotateX(-20deg) rotateY(-20deg);\n}\n.over:nth-child(4):hover ~ .card-box {\n  transform: rotateX(0deg) rotateY(20deg);\n}\n.over:nth-child(5):hover ~ .card-box {\n  transform: rotateX(0deg) rotateY(0deg);\n}\n.over:nth-child(6):hover ~ .card-box {\n  transform: rotateX(0deg) rotateY(-20deg);\n}\n.over:nth-child(7):hover ~ .card-box {\n  transform: rotateX(20deg) rotateY(20deg);\n}\n.over:nth-child(8):hover ~ .card-box {\n  transform: rotateX(20deg) rotateY(0deg);\n}\n.over:nth-child(9):hover ~ .card-box {\ntransform: rotateX(20deg) rotateY(-20deg);\n}\n@media screen and (max-width: 370px) {\n.card-box-wrap {\nwidth: 200px;\nheight: 300px;\n}\n.card-box strong {\npadding: 0.5rem;\nborder-radius: 1rem;\ncolor: rgb(255, 255, 255);\n}\n.card-box {\nfont-size: 1rem;\n}\n}"
              }
            },
            {
              "text": {
                "title": "Conclusion",
                "text": "En resumen, en este articulo hemos aprendido cómo crear un efecto 3D sobre un contenedor al pasar el cursor por encima de él utilizando solo HTML y CSS.\nHemos visto cómo utilizar el contenedor principal para contener todo el contenido del efecto, el uso de la perspectiva y transformaciones para lograr el efecto deseado y cómo hacer que el efecto sea responsivo utilizando Media Queries.\nEste efecto es una excelente forma de añadir interacción y dinamismo a tu sitio web y espero que este tutorial haya sido útil en tu aprendizaje."
              }
            }
          ]
        }
      ]
    },

    {
      "i18nReact": [
        { "title": "i18n Básico React" },
        {
          "1": [
            {
              "text": {
                "title": "Comenzamos",
                "text": "i18n es un acrónimo de 'Internationalization', que en español significa 'Internacionalización'.\nSe refiere a la práctica de desarrollar software de tal manera que pueda ser utilizado en diferentes idiomas y regiones del mundo sin necesidad de modificar el código fuente.\n\nEsto se logra mediante la separación del texto y los elementos de la interfaz de usuario de la lógica del programa, permitiendo que estos sean fácilmente traducidos y adaptados a diferentes idiomas.\ni18n es esencial para crear aplicaciones y sitios web que sean accesibles para una audiencia global y que puedan adaptarse a diferentes culturas y idiomas."
              }
            },
            {
              "text": {
                "title": "Instalacion",
                "text": "Para comenzar a utilizar i18n en ReactJS lo primero que debemos hacer es intalarlo:"
              }
            },
            {
              "code": {
                "language": "js",
                "code": "npm install i18next react-i18next"
              }
            },
            {
              "text": {
                "title": "Seteo de la configuracion",
                "text": "Ahora, mi recomendacion, es que crees un archivo auxiliar el cual almacenara la configuracion de i18n para luego utilizarla en los componentes de tu aplicacion que desees, en este deberemos importar las librerias e inicializar i18n con la configuracion que necesitemos, en este ejemplo usaremos ingles y español."
              }
            },
            {
              "code": {
                "language": "js",
                "code": "import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\ni18next.use(initReactI18next).init({\n resources: {\n  en: {\n   translation: {\n    'key': 'Hello World'\n   }  \n },\n  es: {\n   translation: {\n    'key': 'Hola Mundo'\n   }\n  }\n },\n lng:'en',\n fallbackLng: 'en',\n});"
              }
            },
            {
              "text": {
                "title": "i18n Provider",
                "text": "Como consiguiente deberemos envolver nuestra aplicacion React con el componente 'I18nextProvider' proporcionado por react-i18next:"
              }
            },
            {
              "code": {
                "language": "js",
                "code": "import { I18nextProvider } from 'react-i18next';\n\nconst App = () => {\n return (\n  <I18nextProvider i18n={i18next}>\n   {/* Tu aplicación aquí */}\n  </I18nextProvider>\n );\n};"
              }
            },
            {
              "text": {
                "title": "Usar i18n",
                "text": "¿Como utilizaremos i18n en nuestra aplicacion?\nPues en realidad es algo sumamente sencillo deberemos, en el componente en el cual queramos utilizarlo implementar la funcion 't' para traducir el texto."
              }
            },
            {
              "code": {
                "language": "js",
                "code": "import { useTranslation } from 'react-i18next';\n\nconst MyComponent = () => {\n const { t } = useTranslation();\n return <h1>{t('key')}</h1>;\n};"
              }
            },
            {
              "text": {
                "title": "Cambiar el idioma",
                "text": "Otra parte importante que debes querer saber es como cambiar el idioma de nuestra aplicacion, esto lo lograremos mediante la funcion i18next.changeLanguage('lang'), donde el parametro 'lang' se refiere al lenguaje al que deseas cambiar tu aplicacion."
              }
            },
            {
              "code": {
                "language": "js",
                "code": "i18next.changeLanguage('es')"
              }
            },
            {
              "text": {
                "title": "Conclusion",
                "text": "Espero que esto te ayude a comenzar a utilizar i18n en tu aplicacion de React.\nTen en cuenta que hay muchas mas configuraciones por lo que te recomiendo revisar la documentacion de i18next y react-i18next para obtener más información."
              }
            }
          ]
        }
      ]
    },

    {
      "metaTagFav": [
        { "title": "Etiquetas meta:og y favicons" },
        {
          "1": [
            {
              "text": {
                "title": "Conceptos básicos",
                "text": "Empezemos comprendiendo que es el SEO, y para que sirve.\n\nEl SEO (Optimizacion para motores de busqueda), se trata del conjunto de estrategias y técnicas de optimización que se hacen en una página web para que aparezca orgánicamente en buscadores de Internet como Google, Yahoo o Youtube.\n\nUna de las formas para mejorar nuestro SEO es utilizando meta tags (etiquetas meta)."
              }
            },
            {
              "text": {
                "title": "¿Que son las meta:og tags?",
                "text": "Las meta tags, o etiquetas, son fragmentos de código claves que aparecen en el código HTML de una web y que ayudan a los motores de búsqueda a interpretar mejor la página ofreciéndole información extra de la misma.\n\nPero como ya has visto, en este articulo hablaremos sobre las meta:og tags (etiquetas meta open graph).\n\nEstas son un protocolo que nos permite indicar a las redes sociales que información mostrar cada vez que se comparta un enlace de nuestro sitio web.\n\nY a pesar de que no tienen tanto impacto en el seo como las principales etiquetas meta, estas seran la cara de nuestro sitio web en las redes sociales por lo que es buena idea agregarlas a nuestro HTML."
              }
            },
            {
              "text": {
                "title": "Añadiendo nuestras meta:og tags",
                "text": "A continuacion verás un bloque de codigo HTML, es importante remarcar que esto ira dentro del elemento <head> de nuestro 'index.html'.\n\nAhora antes de ver el codigo, expliquemos cada parte:\n\n• og:title : Esta etiqueta es en la cual indicaremos el titulo de nuestro sitio web.\n\n• og:description : Aqui colocaremos una descripcion breve y detallada de nuestro sitio web, utilizando tantas palabras clave como sea posible.\n\n• og:image : Por ultimo, en esta etiqueta, agregaremos una imagen la cual sera una 'preview' del sitio web, asi como tambien puede ser el logo del mismo u lo que usted encuentre optimo."
              }
            },
            {
              "code": {
                "language": "html",
                "code": "<meta property='og:title' content='Nombre del sitio web' />\n\n<meta property='og:description' content='Descripcion del sitio web'/>\n\n<meta property='og:image' content='URL hacia la imagen del sitio web' />"
              }
            },
            {
              "text": {
                "title": "Generar nuestro Favicon",
                "text": "Ahora que ya sabemos como implementar las etiquetas Open Graph, veamos la segunda parte de este articulo.\n\nUna forma sencilla y rapida para poder generar nuestro favicon. Primero que nada deberemos tener nuestro favicon (.png / .jpg) ya creado y diseñado a nuestro gusto, para lograr esto podemos usar multiples programas como Figma, Photoshop, Ilustrator, entre otros. El tamaño recomendado es de 260 x 260 pixeles.\n\nUna vez que ya tengamos nuestro favicon, iremos al sitio web Real Favicon Generator, y aqui oprimiremos el boton azul y seleccionaremos nuestro favicon de la ubicacion donde lo hayamos guardado tras crearlo.\n\nUna vez hecho esto, veras como una gran cantidad de configuraciones se despliegan. Estas son esteticas, por lo que deberas revisar y adaptar tu favicon a gusto propio, una vez hecho nos dirigiremos al final de la pagina en donde encontraremos un boton el cual dice 'Generate your Favicons and HTML code'.\n\nHaremos click en el y entonces podremos descargar un WinRar con nuestro favicon (Favicon Package), y tambien nos brinda el codigo que deberemos insertar en el elemento <head> de nuestro HTML.\n\nNo olvides que el atributo 'href' debera ser sustituido en base a la ubicacion donde hayas colocado el paquete de favicon."
              }
            },
            {
              "link": {
                "title": "Real Favicon Generator",
                "link": "https://realfavicongenerator.net/"
              }
            },
            {
              "text": {
                "title": "Conclusión",
                "text": "En este articulo aprendimos como implementar etiquetas Open Graph para maximizar las interacciones con nuestro sitio web en redes sociales, tambien una manera sencilla y rapida de generar nuestro favicon y que este adquiera adaptabilidad a distintos navegadores."
              }
            }
          ]
        }
      ]
    },

    {
      "dessignPatterSingleton": [
        { "title": "Singleton" },
        {
          "1": [
            {
              "text": {
                "title": "General",
                "text": "Haga que la clase del objeto de instancia única sea responsable de la creación, la inicialización, el acceso y la aplicación.\nDeclare la instancia como miembro de datos estáticos privados.\nProporcione una función miembro pública estática que encapsule todo el código de inicialización y proporcione acceso a la instancia.\n\nEl cliente llama a la función de acceso (usando el nombre de clase y el operador de resolución de alcance) siempre que se requiere una referencia a la instancia única.\n\nEl patron singleton debe usarse solo en caso de que los siguientes 3 criterios se cumplan :\n• La propiedad de la instancia única no se puede asignar razonablemente.\n• La inicializacion floja (lazy initialization) es deseable.\n• El acceso global no está previsto de otro modo.\n\nEl patrón Singleton se puede ampliar para admitir el acceso a un número de instancias específico de la aplicación."
              }
            },
            {
              "text": {
                "title": "Estructura",
                "text": "Haga que la clase de la instancia única sea responsable del acceso y la 'inicialización en el primer uso'.\nLa instancia única es un atributo estático privado. La función de acceso es un método estático público."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/AfYkhke.png",
                "alt": "Singletone Structure Example"
              }
            },
            {
              "text": {
                "title": "Ejemplo",
                "text": "El patrón Singleton asegura que una clase tenga solo una instancia y proporciona un punto de acceso global a esa instancia.\nLleva el nombre del conjunto singleton, que se define como un conjunto que contiene un elemento.\nLa oficina del presidente de los Estados Unidos es un Singleton.\nLa Constitución de los Estados Unidos especifica los medios por los cuales se elige a un presidente, limita la duración del cargo y define el orden de sucesión.\nComo resultado, puede haber como máximo un presidente activo en un momento dado.\nIndependientemente de la identidad personal del presidente activo, el título 'El presidente de los Estados Unidos' es un punto de acceso global que identifica a la persona en el cargo."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/qMC1Q72.png",
                "alt": "Singletone Image Example"
              }
            },
            {
              "text": {
                "title": "Reconocer uso",
                "text": "La aplication necesita una, y solo una, instancia de un objeto.\nAdicionalmente, la inicializacion diferida (lazy initializacion) y el acceso global son necesarios."
              }
            },
            {
              "link": {
                "title": "Ejemplo GitHub",
                "link": "https://github.com/GoorezyEST/PD_Singletone/blob/main/Program.cs"
              }
            },
            {
              "text": {
                "title": "Conclusión",
                "text": "En este articulo aprendimos como y cuando usar el patron de diseño Singleton.\nDesde una descripcion general del mismo, hasta un ejemplo en un repositorio de GitHub.\nEspero que te haya gustado este articulo, ten en cuenta que si quieres información más detallada sobre los patrones de diseño puedes leer el libro 'Design Patterns' de 'The gang of Four'."
              }
            }
          ]
        }
      ]
    },
    {
      "dessignPatterFactory": [
        { "title": "Factory" },
        {
          "1": [
            {
              "text": {
                "title": "General",
                "text": "El patron factory es para crear objetos e implementar un algoritmo.\nUna superclase especifíca todo el comportamiento estándar y genérico, y luego delega los detalles de creación a las subclases que proporciona el cliente.\n\nFactory hace que un diseño sea más personalizable y solo un poco más complicado.\nOtros patrones de diseño requieren nuevas clases, mientras que factory solo requiere una nueva operación.\n\nLa gente a menudo usa factory como la forma estándar de crear objetos; pero no es necesario si: la clase de la que se crea una instancia nunca cambia, o la instancia se lleva a cabo en una operación que las subclases pueden anular fácilmente."
              }
            },
            {
              "text": {
                "title": "Estructura",
                "text": "Una definición cada vez más popular de método de factory es:\nUn método estático de una clase que devuelve un objeto del tipo de esa clase.\nPero a diferencia de un constructor, el objeto real que devuelve podría ser una instancia de una subclase.\nA diferencia de un constructor, se puede reutilizar un objeto existente, en lugar de crear un nuevo objeto.\nA diferencia de un constructor, los métodos de factory pueden tener nombres diferentes y más descriptivos.\nEl cliente está totalmente desvinculado de los detalles de implementación de las clases derivadas.\nLa creación polimórfica ahora es posible."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/7tSd1Ln.png",
                "alt": "Factory Image Example"
              }
            },
            {
              "text": {
                "title": "Ejemplo",
                "text": "Factory define una interfaz para crear objetos, pero permite que las subclases decidan qué clases instanciar.\nLas prensas de moldeo por inyección demuestran este patrón.\nLos fabricantes de juguetes de plástico procesan polvo de moldeo de plástico e inyectan el plástico en moldes de las formas deseadas.\nLa clase de juguete (automóvil, figura de acción, etc.) está determinada por el molde."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/TIcvPjQ.png",
                "alt": "Factory Image Example"
              }
            },
            {
              "text": {
                "title": "Reconocer uso",
                "text": "Un framework debe estandarizar la arquitectura de modelo para una variedad de aplicaciones, pero permitir a las aplicaciones individuales definir sus propio objetos y prever su instanciacion."
              }
            },
            {
              "link": {
                "title": "Ejemplo GitHub",
                "link": "https://github.com/GoorezyEST/PD_Factory"
              }
            },
            {
              "text": {
                "title": "Conclusión",
                "text": "En este articulo aprendimos como y cuando usar el patron de diseño Factory.\nDesde una descripcion general del mismo, hasta un ejemplo en un repositorio de GitHub.\nEspero que te haya gustado este articulo, ten en cuenta que si quieres información más detallada sobre los patrones de diseño puedes leer el libro 'Design Patterns' de 'The gang of Four'."
              }
            }
          ]
        }
      ]
    },
    {
      "dessignPatterAbsFactory": [
        { "title": "Abstract Factory" },
        {
          "1": [
            {
              "text": {
                "title": "General",
                "text": "Proporcione un nivel de indirección que abstraiga la creación de familias de objetos relacionados o dependientes sin especificar directamente sus clases concretas.\n\nEl objeto 'fábrica' tiene la responsabilidad de proporcionar servicios de creación para toda la familia de plataformas. Los clientes nunca crean objetos de plataforma directamente, le piden a la fábrica que lo haga por ellos.\n\nEste mecanismo facilita el intercambio de familias de productos porque la clase específica del objeto de fábrica aparece solo una vez en la aplicación, donde se instancia.\nLa aplicación puede reemplazar al por mayor toda la familia de productos simplemente instanciando una instancia concreta diferente de la fábrica abstracta.\n\nDebido a que el servicio proporcionado por el objeto de fábrica es tan generalizado, se implementa de manera rutinaria como Singleton."
              }
            },
            {
              "text": {
                "title": "Estructura",
                "text": "Abstract factory define un método de fábrica por producto. Cada metodo fábrica encapsula el nuevo operador y las clases de productos concretas y específicas de la plataforma.\nLuego, cada 'plataforma' se modela con una clase derivada de fábrica."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/pkNM43W.png",
                "alt": "Abstract Factory Image Example"
              }
            },
            {
              "text": {
                "title": "Ejemplo",
                "text": "El propósito de Abstract Factory es proporcionar una interfaz para crear familias de objetos relacionados, sin especificar clases concretas.\nUn ejemplo podemos verlo en el equipo de estampado de láminas de metal utilizado en la fabricación de automóviles japoneses. El equipo de estampado es una Fábrica Abstracta que crea piezas de carrocería.\nLa misma maquinaria se utiliza para estampar puertas derechas, izquierdas, guardabarros delantero derecho, guardabarros delantero izquierdo, capotas, etc. para diferentes modelos de automóviles.\nMediante el uso de rodillos para cambiar los troqueles de estampado, las clases de hormigón producidas por la maquinaria se pueden cambiar en tres minutos."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/4Bhp0fm.png",
                "alt": "Factory Image Example"
              }
            },
            {
              "text": {
                "title": "Reconocer uso",
                "text": "Si una aplicación va a ser portátil, debe encapsular las dependencias de la plataforma. Estas 'plataformas' pueden incluir: sistema de ventanas, sistema operativo, base de datos, etc.\nCon demasiada frecuencia, esta encapsulación no está diseñada de antemano y muchas declaraciones de casos #ifdef con opciones para todas las plataformas admitidas actualmente comienzan a procrear como conejos a lo largo del código."
              }
            },
            {
              "link": {
                "title": "Ejemplo GitHub",
                "link": "https://github.com/GoorezyEST/PD_AbstractFactory"
              }
            },
            {
              "text": {
                "title": "Conclusión",
                "text": "En este articulo aprendimos como y cuando usar el patron de diseño Abstract Factory.\nDesde una descripcion general del mismo, hasta un ejemplo en un repositorio de GitHub.\nEspero que te haya gustado este articulo, ten en cuenta que si quieres información más detallada sobre los patrones de diseño puedes leer el libro 'Design Patterns' de 'The gang of Four'."
              }
            }
          ]
        }
      ]
    },
    {
      "dessignPatterPrototype": [
        { "title": "Prototype" },
        {
          "1": [
            {
              "text": {
                "title": "General",
                "text": "Declare una clase base abstracta que especifique un método de 'clon'.\nEntonces, el cliente, en lugar de escribir código que invoque el operador 'new' en un nombre de clase fijo, llama a una operación de 'clon' en la clase base abstracta, proporcionando una cadena o tipo de datos enumerados que designa la clase derivada concreta deseada."
              }
            },
            {
              "text": {
                "title": "Estructura",
                "text": "La fábrica sabe como encontrar el prototipo correcto, y cada producto sabe como generar nuevas instancias de si mismo."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/K9vfYvh.png",
                "alt": "Photo related to the structure of the Prototype"
              }
            },
            {
              "text": {
                "title": "Ejemplo",
                "text": "El patron prototipo especifica el tipo de objetos a crear usando una instancia prototípica.\n\nLos prototipos de nuevos productos son a menos construidos antes de estar en produccion, pero en este ejemplo el prototipo es pasivo y no participa en la copia de si mismo.\n\nLa mitosis de las celulas - resultando en dos celulas identicas - es un ejemplo de un prototipo que cumple un rol activo en copiarse a si mismo. Este es un ejemplo del patron prototipo."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/KNwxRJT.png",
                "alt": "Photo related to the example of the Prototype"
              }
            },
            {
              "text": {
                "title": "Reconocer uso",
                "text": "Utiliza el patrón Prototype cuando tu código no deba depender de las clases concretas de objetos que necesites copiar. Esto sucede a menudo cuando tu código funciona con objetos pasados por código de terceras personas a través de una interfaz."
              }
            },
            {
              "link": {
                "title": "Ejemplo GitHub",
                "link": "https://github.com/GoorezyEST/PD_Prototype/blob/main/Program.cs"
              }
            },
            {
              "text": {
                "title": "Conclusión",
                "text": "En este articulo aprendimos como y cuando usar el patron de diseño Prototype.\nDesde una descripcion general del mismo, hasta un ejemplo en un repositorio de GitHub.\nEspero que te haya gustado este articulo, ten en cuenta que si quieres información más detallada sobre los patrones de diseño puedes leer el libro 'Design Patterns' de 'The gang of Four'."
              }
            }
          ]
        }
      ]
    },
    {
      "dessignPatterFacade": [
        { "title": "Facade" },
        {
          "1": [
            {
              "text": {
                "title": "General",
                "text": "El patron facade analiza la encapsulación de un subsistema complejo dentro de un solo objeto de interfaz.\nEsto reduce la curva de aprendizaje necesaria para aprovechar con éxito el subsistema.\nTambién promueve el desacoplamiento del subsistema de sus muchos clientes potenciales.\nPor otro lado, si la fachada es el único punto de acceso para el subsistema, limitará las funciones y la flexibilidad que pueden necesitar los 'usuarios avanzados'.\n\nEl objeto facade debe ser un facilitador bastante simple. No debe convertirse en un oráculo que todo lo sabe o en un objeto 'dios'."
              }
            },
            {
              "text": {
                "title": "Estructura",
                "text": "La fachada toma un “acertijo envuelto en un enigma rodeado de misterio”, e intercala un envoltorio que doma la masa amorfa e inescrutable de software.\nVeamos un ejemplo en el que: el “subsystemOne” y “subsystemThree” no interactuan con los componentes internos del “subsystemTwo”."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/7n5gHkd.png",
                "alt": "Photo related to the structure of the Prototype"
              }
            },
            {
              "text": {
                "title": "Ejemplo",
                "text": "La fachada define una interfaz unificada de nivel superior para un subsistema que facilita su uso.\nLos consumidores se encuentran con facade cuando ordenan de un catálogo.\nEl consumidor llama a un número y habla con un representante de servicio al cliente.\nEl representante de servicio al cliente actúa como una fachada, proporcionando una interfaz para el departamento de cumplimiento de pedidos, el departamento de facturación y el departamento de envío."
              }
            },
            {
              "img": {
                "src": "https://i.imgur.com/YPZApZc.png",
                "alt": "Photo related to the example of the Prototype"
              }
            },
            {
              "text": {
                "title": "Reconocer uso",
                "text": "Un segmento de la comunidad de clientes necesita una interfaz simplificada para la funcionalidad general de un subsistema complejo."
              }
            },
            {
              "link": {
                "title": "Ejemplo GitHub",
                "link": "https://github.com/GoorezyEST/PD_Facade"
              }
            },
            {
              "text": {
                "title": "Conclusión",
                "text": "En este articulo aprendimos como y cuando usar el patron de diseño Facade.\nDesde una descripcion general del mismo, hasta un ejemplo en un repositorio de GitHub.\nEspero que te haya gustado este articulo, ten en cuenta que si quieres información más detallada sobre los patrones de diseño puedes leer el libro 'Design Patterns' de 'The gang of Four'."
              }
            }
          ]
        }
      ]
    }
  ]
}
